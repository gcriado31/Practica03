[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\USUARIO\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\USUARIO\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.3 (Oracle Corporation Java 18)
[debug]       Load.loadUnit: plugins took 75.4598ms
[debug]       Load.loadUnit: defsScala took 0.267ms
[debug] [Loading] Scanning directory C:\Users\USUARIO\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\USUARIO\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 19.7064 ms
[debug]           Load.resolveProject(global-plugins) took 46.2709ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\USUARIO\.sbt\1.0\plugins, plugins: List(<none>))) took 90.3503ms
[debug] [Loading] Done in C:\Users\USUARIO\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 118.4734ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2155ms
[debug]     Load.loadUnit(file:/C:/Users/USUARIO/.sbt/1.0/plugins/, ...) took 202.8306ms
[debug]   Load.apply: load took 419.884ms
[debug]   Load.apply: resolveProjects took 6.9344ms
[debug]   Load.apply: finalTransforms took 61.5669ms
[debug]   Load.apply: config.delegates took 7.2913ms
[debug]   Load.apply: Def.make(settings)... took 369.4782ms
[debug]   Load.apply: structureIndex took 110.9009ms
[debug]   Load.apply: mkStreams took 2.1324ms
[info] loading global plugins from C:\Users\USUARIO\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 5797.1602ms
[debug]           Load.loadUnit: plugins took 18.5455ms
[debug]           Load.loadUnit: defsScala took 0.0022ms
[debug] [Loading] Scanning directory C:\Users\USUARIO\IdeaProjects\Practica03\project
[debug]             Load.loadUnit: mkEval took 5.9344ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\USUARIO\IdeaProjects\Practica03\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.0572 ms
[info] loading settings for project practica03-build from idea.sbt ...
[debug]               Load.resolveProject(practica03-build) took 7.747ms
[debug]             Load.loadTransitive: finalizeProject(Project(id practica03-build, base: C:\Users\USUARIO\IdeaProjects\Practica03\project, plugins: List(<none>))) took 9.1805ms
[debug] [Loading] Done in C:\Users\USUARIO\IdeaProjects\Practica03\project, returning: (practica03-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 1670.35ms
[debug]           Load.loadUnit: cleanEvalClasses took 4.4233ms
[debug]         Load.loadUnit(file:/C:/Users/USUARIO/IdeaProjects/Practica03/project/, ...) took 1693.8955ms
[debug]       Load.apply: load took 1694.9677ms
[debug]       Load.apply: resolveProjects took 0.0833ms
[debug]       Load.apply: finalTransforms took 7.7226ms
[debug]       Load.apply: config.delegates took 0.3107ms
[debug]       Load.apply: Def.make(settings)... took 55.1999ms
[debug]       Load.apply: structureIndex took 20.882ms
[debug]       Load.apply: mkStreams took 0.0017ms
[info] loading project definition from C:\Users\USUARIO\IdeaProjects\Practica03\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 2322.7693ms
[debug]     Load.loadUnit: defsScala took 0.0023ms
[debug] [Loading] Scanning directory C:\Users\USUARIO\IdeaProjects\Practica03
[debug]       Load.loadUnit: mkEval took 0.1526ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.3154 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 25.3533ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\USUARIO\IdeaProjects\Practica03, plugins: List(<none>))) took 27.7898ms
[debug] [Loading] Done in C:\Users\USUARIO\IdeaProjects\Practica03, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 1018.414ms
[debug]     Load.loadUnit: cleanEvalClasses took 11.254ms
[debug]   Load.loadUnit(file:/C:/Users/USUARIO/IdeaProjects/Practica03/, ...) took 3353.0324ms
[debug] Load.apply: load took 3354.5935ms
[debug] Load.apply: resolveProjects took 0.0912ms
[debug] Load.apply: finalTransforms took 21.443ms
[debug] Load.apply: config.delegates took 0.2422ms
[debug] Load.apply: Def.make(settings)... took 57.6477ms
[debug] Load.apply: structureIndex took 20.8329ms
[debug] Load.apply: mkStreams took 0.0016ms
[info] set current project to Practica03 (in build file:/C:/Users/USUARIO/IdeaProjects/Practica03/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 51861 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 51861, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to Practica03 (in build file:/C:/Users/USUARIO/IdeaProjects/Practica03/)
[debug] > Exec(idea-shell, None, None)
